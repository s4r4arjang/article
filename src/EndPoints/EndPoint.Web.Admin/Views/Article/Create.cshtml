@model EndPoint.Web.Admin.ViewModels.Articles.CreateArticleVewModel

@{
    ViewData["Title"] = "ایجاد مقاله";
}

<div class="content-wrapper">
          <div class="page-header">
            <h3 class="page-title">
              مقاله جدید
            </h3>
            <nav aria-label="breadcrumb">
              <ol class="breadcrumb">
                <li class="breadcrumb-item"><a asp-action="index" asp-controller="Article">مقاله</a></li>
                <li class="breadcrumb-item active" aria-current="page">مقاله جدید</li>
              </ol>
            </nav>
          </div>
          <div class="row">
        <div class="col-12 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">مقاله</h4>
                    <form class="forms-sample" method="post" asp-action="Create" asp-controller="Article" enctype="multipart/form-data">
                   
                        <div class="form-group">
                            <label asp-for="Title"></label>
                            <input type="text" class="form-control" asp-for="Title" style="width: 500px;" placeholder="عنوان خود را وارد کنید">
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>
                      
                      
                        <div class="form-group">
                            <label asp-for="ShortDescription"></label>
                            <input type="text" class="form-control" asp-for="ShortDescription" >
                            <span asp-validation-for="ShortDescription" class="text-danger"></span>
                        </div>

                        
                        <div class="form-group">
                            <label asp-for="Content"></label>
                             <textarea asp-for="Content" class="form-control" >
                            </textarea>
                            <span asp-validation-for="Content" class="text-danger"></span>
                        </div>

                        
                        <div class="form-group">
                            <label asp-for="CategoryId" class="control-label"></label>
                             <select asp-for="CategoryId" class ="form-control" asp-items="ViewBag.CategoryId"></select>
                             <span asp-validation-for="CategoryId" class="text-danger"></span>
                        </div>

                         <div class="col-md-10">

                         <div class="custom-file">  
                                <input class ="form-control" asp-for="ArticleImageFile" type="file"  multiple>  
                                <label class="control-label" asp-for="ArticleImageFile">تصویر مورد نظر را انتخاب نمایید</label>
                            </div>  

                         </div>

                          <div class="col-md-10">

                         <div class="custom-file">  
                                <input class ="form-control" asp-for="ArticleFile" type="file"  multiple>  
                                <label class="control-label" asp-for="ArticleFile">فایل مورد نظر را انتخاب نمایید</label>
                            </div>  

                         </div>

                        <button type="submit" class="btn btn-primary mr-2">ثبت</button>
                        <a asp-action="index" asp-controller="Article" class="btn btn-light">بازگشت</a>
                    </form>

                   
                </div>
            </div>
        </div>
          </div>
        </div>

<script src="~/lib/ckeditor5/ckeditor.min.js"></script>


@section scripts{  
<script type="text/javascript">
        class MyUploadAdapter {
            constructor(loader) {
                // The file loader instance to use during the upload. It sounds scary but do not
                // worry — the loader will be passed into the adapter later on in this guide.
                this.loader = loader;
            }

            // Starts the upload process.
            upload() {
                return this.loader.file
                    .then(file => new Promise((resolve, reject) => {
                        this._initRequest();
                        this._initListeners(resolve, reject, file);
                        this._sendRequest(file);
                    }));
            }

            // Aborts the upload process.
            abort() {
                if (this.xhr) {
                    this.xhr.abort();
                }
            }

            // Initializes the XMLHttpRequest object using the URL passed to the constructor.
            _initRequest() {
                const xhr = this.xhr = new XMLHttpRequest();

                // Note that your request may look different. It is up to you and your editor
                // integration to choose the right communication channel. This example uses
                // a POST request with JSON as a data structure but your configuration
                // could be different.
                xhr.open('POST', '@Url.Action("Uploadimage","Article")', true);
                xhr.responseType = 'json';
            }
            // Initializes XMLHttpRequest listeners.
            _initListeners(resolve, reject, file) {
                const xhr = this.xhr;
                const loader = this.loader;
                const genericErrorText = `Couldn't upload file: ${file.name}.`;

                xhr.addEventListener('error', () => reject(genericErrorText));
                xhr.addEventListener('abort', () => reject());
                xhr.addEventListener('load', () => {
                    const response = xhr.response;

                    // This example assumes the XHR server's "response" object will come with
                    // an "error" which has its own "message" that can be passed to reject()
                    // in the upload promise.
                    //
                    // Your integration may handle upload errors in a different way so make sure
                    // it is done properly. The reject() function must be called when the upload fails.
                    if (!response || response.error) {
                        return reject(response && response.error ? response.error.message : genericErrorText);
                    }

                    // If the upload is successful, resolve the upload promise with an object containing
                    // at least the "default" URL, pointing to the image on the server.
                    // This URL will be used to display the image in the content. Learn more in the
                    // UploadAdapter#upload documentation.
                    resolve({
                        default: response.url
                    });
                });

                // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
                // properties which are used e.g. to display the upload progress bar in the editor
                // user interface.
                if (xhr.upload) {
                    xhr.upload.addEventListener('progress', evt => {
                        if (evt.lengthComputable) {
                            loader.uploadTotal = evt.total;
                            loader.uploaded = evt.loaded;
                        }
                    });
                }
            }


            // Prepares the data and sends the request.
            _sendRequest(file) {
                // Prepare the form data.
                const data = new FormData();

                data.append('upload', file);

                // Important note: This is the right place to implement security mechanisms
                // like authentication and CSRF protection. For instance, you can use
                // XMLHttpRequest.setRequestHeader() to set the request headers containing
                // the CSRF token generated earlier by your application.

                // Send the request.
                this.xhr.send(data);
            }

        }

                    function MyCustomUploadAdapterPlugin(editor) {
            editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                // Configure the URL to the upload script in your back-end here!
                return new MyUploadAdapter(loader);
            };
        }
       
            
            ClassicEditor
            .create(document.querySelector('#Content'), {
                // toolbar: [ 'heading', '|', 'bold', 'italic', 'link' ]
                    extraPlugins: [MyCustomUploadAdapterPlugin],
            })
            .then(editor => {
                window.editor = editor;
            })
            .catch(err => {
                console.error(err.stack);
            }            );

</script>
}
@*@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}*@
